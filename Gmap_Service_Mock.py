{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1VFlkxeKL-A0jD8i2G8vdU0rVNACAqGsg","authorship_tag":"ABX9TyMt7T7w+VBefhH8O6DbhncJ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import hashlib\n","from typing import Tuple, Set, Optional\n","\n","# --- Constants ---\n","# State structure: (m, d_len, P, r)\n","STATE_TUPLE = Tuple[int, int, int, int]\n","\n","class GMapService:\n","    \"\"\"\n","    A mock class simulating the Global State Map (G-Map) service for the cluster.\n","\n","    In a production environment, this would be a distributed, highly-available\n","    key-value store (like Redis or Cassandra) to handle the 10^11 state keys.\n","\n","    The core function is check_and_add_state, which must be atomically secure.\n","    \"\"\"\n","\n","    # Static member to simulate the distributed database (a Python set for fast lookup)\n","    _processed_keys: Set[str] = set()\n","\n","    @staticmethod\n","    def get_state_key(S: STATE_TUPLE) -> str:\n","        \"\"\"\n","        Generates the unique, fixed-length SHA-256 key for a given symbolic state S.\n","        This key is used for indexing in the distributed database.\n","        \"\"\"\n","        # Serialization: Concatenate the components in a consistent order\n","        s_serialized = f\"{S[0]}_{S[1]}_{S[2]}_{S[3]}\"\n","\n","        # Hashing: Encode and hash the string using SHA-256.\n","        return hashlib.sha256(s_serialized.encode('utf-8')).hexdigest()\n","\n","    @classmethod\n","    def check_and_add_state(cls, S: STATE_TUPLE) -> bool:\n","        \"\"\"\n","        Simulates the critical, atomic cluster synchronization operation.\n","\n","        1. Generates the key.\n","        2. Atomically checks if the key is present.\n","        3. If NEW, adds the key and returns True.\n","        4. If DUPLICATE, returns False.\n","\n","        Returns:\n","            True if the state is NEW and should be queued for processing.\n","            False if the state was already present (duplicate).\n","        \"\"\"\n","        state_key = cls.get_state_key(S)\n","\n","        # In a distributed database, this check/add is a single, atomic command\n","        # (e.g., Redis's SETNX or a database transaction lock)\n","        if state_key in cls._processed_keys:\n","            return False\n","        else:\n","            cls._processed_keys.add(state_key)\n","            return True\n","\n","    @classmethod\n","    def get_total_unique_states(cls) -> int:\n","        \"\"\"\n","        Returns the total number of unique states processed so far,\n","        simulating a database key count.\n","        \"\"\"\n","        return len(cls._processed_keys)\n","\n","    @classmethod\n","    def reset_gmap(cls) -> None:\n","        \"\"\"Resets the mock map for clean testing.\"\"\"\n","        cls._processed_keys.clear()\n","\n","\n","# --- Test Execution ---\n","if __name__ == '__main__':\n","\n","    GMapService.reset_gmap()\n","\n","    # Define a set of mock states, with intentional duplication\n","    STATE_A = (2, 5, 101, 3)\n","    STATE_B = (3, 6, 202, 5)\n","    STATE_C = (2, 5, 101, 3) # Duplicate of A\n","\n","    print(\"--- G-Map Service Integrity Test ---\")\n","\n","    # Core 1 Processes State A\n","    if GMapService.check_and_add_state(STATE_A):\n","        print(f\"Core 1: Processed State A. Key: {GMapService.get_state_key(STATE_A)[:8]}... (NEW)\")\n","    else:\n","        print(\"Core 1: State A already processed. (ERROR)\")\n","\n","    # Core 2 Processes State B\n","    if GMapService.check_and_add_state(STATE_B):\n","        print(f\"Core 2: Processed State B. Key: {GMapService.get_state_key(STATE_B)[:8]}... (NEW)\")\n","    else:\n","        print(\"Core 2: State B already processed. (ERROR)\")\n","\n","    # Core 3 Tries to Process State C (Duplicate of A)\n","    if GMapService.check_and_add_state(STATE_C):\n","        print(f\"Core 3: Processed State C. (ERROR)\")\n","    else:\n","        print(f\"Core 3: State C ignored. (DUPLICATE DETECTED)\")\n","\n","    print(f\"\\nFinal Integrity Check: Total unique states claimed: {GMapService.get_total_unique_states()} (Expected: 2)\")\n"],"metadata":{"id":"PjnRUNihg3jl"},"execution_count":null,"outputs":[]}]}