{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNq7efdNI6DCVSPu/Ak+L7g"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"r9oVsoxse5DF"},"outputs":[],"source":["import random\n","from typing import List, Tuple, Dict\n","\n","# --- Constants ---\n","# The number of initial symbolic states (m=2, d_len=5, P in [0, 99], r in [1, 999])\n","TOTAL_INITIAL_STATES = 50000\n","K = 3 # Truncation parameter (r <= 10^K - 1)\n","\n","# --- State Definition and Generation ---\n","\n","def generate_initial_states(count: int, k: int) -> List[Tuple[int, int, int, int]]:\n","    \"\"\"\n","    Mocks the generation of the initial 50,000 symbolic states based on the\n","    validated test parameters (m=2, d_len=5, P in [0, 99], r in [1, 10^k - 1]).\n","    The state is: (m, d_len, P, r)\n","    \"\"\"\n","    initial_states = []\n","\n","    # Define fixed and variable ranges for the initial test set\n","    M_FIXED = 2\n","    D_LEN_FIXED = 5\n","    P_RANGE = range(0, 100)\n","    R_RANGE = range(1, 10**k) # [1, 999] for k=3\n","\n","    # We iterate over the known ranges to generate the exact set used for validation\n","    p_values = list(P_RANGE)\n","    r_values = list(R_RANGE)\n","\n","    # The actual set is the Cartesian product of P and r, but we'll mock a large list\n","    # for simplicity in this scheduler demo.\n","    for i in range(count):\n","        # The key for partitioning is 'r', so we ensure 'r' varies widely.\n","        r = random.choice(r_values)\n","        p = random.choice(p_values)\n","        state = (M_FIXED, D_LEN_FIXED, p, r)\n","        initial_states.append(state)\n","\n","    return initial_states\n","\n","# --- Cluster Partitioning Logic ---\n","\n","def partition_by_residue(\n","    initial_states: List[Tuple[int, int, int, int]],\n","    num_cores: int\n",") -> List[List[Tuple[int, int, int, int]]]:\n","    \"\"\"\n","    Implements the Residue-Based Partitioning Strategy.\n","\n","    1. Sorts the states primarily by their residue (r).\n","    2. Divides the contiguous sorted list into N equal-sized blocks.\n","\n","    This ensures that each core is responsible for a unique range of r-values,\n","    making the initial workload non-overlapping and evenly distributed.\n","    \"\"\"\n","\n","    if num_cores <= 0:\n","        raise ValueError(\"Number of cores must be greater than zero.\")\n","    if num_cores > len(initial_states):\n","        # If we have more cores than states, each core gets one state or fewer.\n","        num_cores = len(initial_states)\n","\n","    # 1. Sort the list primarily by the residue 'r' (index 3)\n","    # The sort is stable and ensures states with similar r values are adjacent.\n","    initial_states.sort(key=lambda s: s[3])\n","\n","    total_states = len(initial_states)\n","    states_per_core = total_states // num_cores\n","    remainder = total_states % num_cores\n","\n","    batches = []\n","    current_index = 0\n","\n","    # 2. Divide the contiguous sorted list into N batches\n","    for i in range(num_cores):\n","        # Distribute the remainder (extra states) one by one to the first 'remainder' cores\n","        batch_size = states_per_core + (1 if i < remainder else 0)\n","\n","        batch = initial_states[current_index:current_index + batch_size]\n","        batches.append(batch)\n","        current_index += batch_size\n","\n","    return batches\n","\n","# --- Execution ---\n","\n","if __name__ == '__main__':\n","\n","    # Define the number of available cores in the cluster\n","    NUM_CLUSTER_CORES = 10\n","\n","    print(f\"--- Cluster Workload Prep: Residue-Based Partitioning ---\")\n","    print(f\"Goal: Divide {TOTAL_INITIAL_STATES} initial states across {NUM_CLUSTER_CORES} cores.\")\n","\n","    # 1. Generate the initial symbolic states\n","    states = generate_initial_states(TOTAL_INITIAL_STATES, K)\n","    print(f\"1. Generated {len(states)} initial states.\")\n","\n","    # 2. Partition the states for the cluster\n","    batches = partition_by_residue(states, NUM_CLUSTER_CORES)\n","\n","    # 3. Analyze and print the resulting batches\n","    print(f\"2. Partitioned into {len(batches)} batches.\")\n","\n","    total_check = 0\n","\n","    for i, batch in enumerate(batches):\n","        total_check += len(batch)\n","\n","        # Get the first and last residue (r) in the batch to show the range\n","        r_start = batch[0][3] if batch else 'N/A'\n","        r_end = batch[-1][3] if batch else 'N/A'\n","\n","        # The P value is not sorted, but we can look at the overall range\n","        p_values = [s[2] for s in batch]\n","        p_min = min(p_values) if p_values else 'N/A'\n","        p_max = max(p_values) if p_values else 'N/A'\n","\n","        print(f\"\\n   Core {i+1} Batch (Size: {len(batch)}):\")\n","        print(f\"     Residue Range (r): {r_start} to {r_end}\")\n","        print(f\"     Prefix Range (P): {p_min} to {p_max} (Unsorted)\")\n","\n","    print(f\"\\n3. Integrity Check: Total states dispatched = {total_check} (Must match {TOTAL_INITIAL_STATES})\")\n"]}]}